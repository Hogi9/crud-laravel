Video 1 :
    Penjelasan sejarah dan fitur yang ada di laravel
Video 2 :
    Penjelasan mengenai instalasi composer, laravel, dan configurasi fitur valet
Video 3 :
    Penjelasan mengenai lokasi model,view,controller;
    Contoh pembuatan route di folder routes/web.php;
    Contoh pembuatan statik file (di folder public);
    Cara mengambil data dari route ke view dengan echo;


Video 4 :
    Menampilkan data menggunakan blade templating dengan cara => {{ $data }}
    @extend digunakan untuk mengambil view dari halaman lain
    @yield berada didalam @extend yang digunakan untuk mengambil @section
    @section berisi data yang berbeda beda dan ditutup dengan @endsection
    Menampilkan data dummy dari route dengan @foreach


Video 5 :
    Memindahkan data static di route ke model
        php artisan make:model nama_model
    Menggunakan fitur collection untuk mendapatkan data yang dibutuhkan di model, fungsi collection dapat dilihat di dokumentasi laravel
    * Kalau self untuk properti/variabel static, kalau static untuk fungsi/method static
        php artisan make:controller nama_controller
    Contoh Penggunaan Collection : 
        collect(array1); << deklarasi
        array1->firstWhere('id',$id) << call function
            ('id',$id) << 'id' yang dimaksud merupakan salah 1 data pada variabel array1 atau sama dengan array1['id']


ideo 6 (Database,Migration,Eloquent(ORM)) :
    Migration :
        Migration / version control database digunakan untuk membuat schema db melalui codingan
            php artisan make:migration nama_migration
            #jika sudah ada migrasinya
            php artisan migrate
        Terdapat fungsi up dan down pada file database/migrations/.
        Fungsi up digunakan untuk pembuatan schema/struktur database
        Fungsi down digunakan untuk menghapus schema dengan cara
            php artisan migrate:rollback
            php artisan migrate:fresh <<< menjalankan fungsi down kemudian up

    Eloquent (ORM) :
        Eloquent digunakan supaya tabel pada db terhubung dengan model
        Jika model berupa orm dan sudah ada file migrationnya, pada file model terdapat fungsi fillable dan hidden
        fillable digunakan supaya data dapat diisi
        hidden digunakan supaya data dapat disembunyikan

    Tinker :
        Aplikasi didalam laravel yang dapat digunakan untuk mengisi data melalui console
            php artisan tinker


Video 7 (Detail Model) :
    Lanjutan dari video 5 dan lebih detail mengenai model di laravel
        php artisan make:model -m nama_model << -m adalah migration
    data['id'] << notasi array; data->id << notasi object
    {!! data !!} << digunakan supaya print pada blade templating menampilkan html yg ada di dalam data
    $fillable penting supaya dapat melakukan input data bnyk
    $guarded kebalikan dari $fillable

    Route Model Binding < digunakan supaya tidak perlu mengambil data di route, cukup dengan memberikan parameter model pada fungsi



Video 8 (Eloquent Relationship/hubungan antar tabel):
    tabel category hasMany tabel post   (1,n)
    tabel post belongsTo tabel category (1,1)
    ^^^
    yang punya relationship adalah category
    hasOne , ofMany

    Relationship dibuat dengan cara menambahkan fungsi dengan nama tabel relasinya dengan return :
        function category()
        {
            return $this->belongsTo(Category::class);
        }


Video 9 (Seeder):
    seeding digunakan untuk memberikan perintah yang digunakan untuk mengisi data pada db saat dilakukan 
    php artisan migrate:fresh
    php artisan db:seed
    php artisan migrate:fresh --seed


Fitur yang telah dipelajari :
    - valet
    - blade templating
    - collection (untuk menyimpan data array) -> video 5
    - migration (version control database) -> video 6
    - Eloquent Object Relational Mapper (ORM) (Tabel pada DB jadi object + Relasi Tabel) -> Video 6,8
    - Tinker (Mengisi Data DB melalui console) -> video 6
    - Route Model Binding -> video 7
    - Seeders -> video 9

Post::create([
    'title'=>'Judul Pertama',
    'category_id'=>1,
    'slug' => 'judul-pertama',
    'excerpt'=>'Lorem ipsum dolor sit amet consectetur, adipisicing elit. Eos est dignissimos voluptatibus, ratione vero natus eveniet dicta dolore adipisci',
    'body'=>'<p>Lorem ipsum dolor sit amet consectetur, adipisicing elit. Eos est dignissimos voluptatibus, ratione vero natus eveniet dicta dolore adipisci, minus tempore, dolorem officia repudiandae ducimus non deserunt temporibus. Sequi optio magni nobis fugit possimus, eum laboriosam provident cupiditate nemo, quas officiis. Consectetur quo error, id tempore reiciendis odit minima debitis pariatur dignissimos laudantium sapiente sed qui eaque at illo <p></p>maiores dolor! Blanditiis, ab error. Ducimus mollitia asperiores error atque voluptatem dolore repellat tempora sequi quidem saepe nam obcaecati corporis cum ipsa magnam ad est soluta alias, delectus rerum itaque. Aperiam perspiciatis temporibus quaerat consequuntur culpa fugit iusto sint expedita, obcaecati tenetur adipisci aut veniam minima ut, fugiat consectetur! Error esse ipsa ullam molestias harum dolorem consequatur facilis corporis nisi temporibus impedit dolore voluptate blanditiis<p></p> quos ex veritatis eum provident aspernatur sapiente asperiores odit soluta, deleniti cum? Soluta recusandae optio id exercitationem blanditiis hic? Nihil laboriosam inventore, aliquam delectus incidunt natus a provident minima accusamus, dignissimos veritatis alias fuga quidem corrupti est voluptas accusantium et impedit iure magni neque numquam cumque. Id modi quam dolor, deserunt porro similique. Sit at inventore perferendis obcaecati nam neque dolor earum incidunt facere eius, quis cupiditate ratione, provident ullam dolores dolorum itaque voluptate debitis reprehenderit.</p>'
]);

Category::create([
    'name'=>'Web Design',
    'slug'=>'web-design'
])